#!/usr/bin/python
# The Orb Literate Programming System

Orb is intended to produce a runnable python file that looks essentially
identical to the source that you wrote. Line numbers should be directly
translatable between the two files.

Since it's always nice to test a system by using it to create itself, the
source for Orb is written in Orb itself. You can view both orb.py and orb.lpy,
and it should be trivial to see the correspondence between the two. This very
page is produced by processing the source file with Orb.

We import sys since we need to get the file name off the command line.

```python
import sys
import subprocess
```

When orb is run, the first argument is treated as the main file that should be
passed to the python interpreter. The file is pre-processed to produce a '.py'
and then run.

```python
if len(sys.argv) < 3:
    print("usage: orb <command> <file>")
    print("commands:")
    print("    compile - compile the .lpy into a .py")
    print("    run     - compile the .lpy into a .py and run it")
    sys.exit(1)
```

The basic operation of Orb is very simple, we scan through the source
file and every time we reach a line that only contains ` ``` ` we toggle
between code and comments. Lines that are considered code are repeated
verbatim, and lines that are considered comments are inserted prefixed with
`## `. The lines that contain the code 'fence' are inserted as blank lines.
Theoretically this scheme is completely reversible, and the original source
file can be reconstructed, but this is currently not implemented.
After each line is processed, the lines are joined back together and should
be passed on to the python process. We simply change the extension to '.py'
so that imports just work without any messing around.

```python
def comp(fname):
    first_line = True
    in_code = False
    code = []
    with open(fname, 'r') as f:
        for line in f:
            # Preserve the shebang line
            if first_line and line[:2] == '#!':
                code.append(line.rstrip())
                first_line = False
                continue
            
            if line.strip()[:3] == '```':
                # toggle between in and out of code
                in_code = not in_code
                # We don't want to insert the ``` into the file
                line = '# @@@ ' + line.strip()[3:]
                code.append(line.rstrip())
                continue

            if in_code:
                code.append(line.rstrip())
            else:
                line = '# ' + line
                code.append(line.rstrip())

    source = '\n'.join(code)
    newfile = '.'.join(fname.split('.')[:-1])+'.py'
    with open(newfile, 'w') as f:
        f.write(source)
```

Since line numbers are the same, nothing silly like "sourcemaps" are needed,
an editor simply needs to be aware that the literate file should be used in
place of the python file. Alternatively, since the Orb process is reversible,
Orb could intelligently handle edits to the python file on top of the literate
file. Running Orb when the Python file has been modified could offer to merge
the two.

```python
def run(fname, *args):
    comp(fname)
    fname = '.'.join(fname.split('.')[:-1])+'.py'
    subprocess.Popen(['python', fname] + list(args)).wait()
```

```python
operations = {
    "run": run,
    "compile": comp
}

command = sys.argv[1]
fname = sys.argv[2]

operations[command](fname)
```
